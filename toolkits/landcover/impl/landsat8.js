/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Dataset = require('users/google/toolkits:landcover/impl/dataset.js').Dataset;

var COMMON_BAND_NAMES = {
  'B1': 'coastal',
  'B2': 'blue',
  'B3': 'green',
  'B4': 'red',
  'B5': 'nir',
  'B6': 'swir1',
  'B7': 'swir2',
  'B8': 'pan',
  'B9': 'cirrus',
  'B10': 'thermal1',
  'B11': 'thermal2'
};

var DEFAULT_VIS_PARAMS =
    {bands: ['B4', 'B3', 'B2'], min: 0, max: 3000, gamma: 1.4};
var CLOUD_SHADOW_BIT_MASK = 1 << 3;
var CLOUD_BIT_MASK = 1 << 5;
var QA_BAND = 'pixel_qa';

/**
 * Returns a new Landsat 8 SR dataset instance.
 *
 * @constructor
 * @return {!Landsat8}
 */
var Landsat8 = function() {
  // Constructor safety.
  if (!(this instanceof Landsat8)) {
    return new Landsat8();
  }

  // TODO(gino-m): Accept `type` "SR"|"TOA".
  Dataset.call(this, 'LANDSAT/LC08/C01/T1_SR', DEFAULT_VIS_PARAMS);
};

// Extend Dataset class. This causes Landsat8 to inherit all method and
// properties of Dataset.
Landsat8.prototype = Object.create(Dataset.prototype);

Landsat8.prototype.COMMON_BAND_NAMES = COMMON_BAND_NAMES;

/**
 * Masks clouds and shadows using relevant bits in the `pixel_qa` band generated
 * by the CFMASK algorithm.
 *
 * Returns the modified dataset.
 *
 * @return {!Landsat8}
 */
Landsat8.prototype.fmaskCloudsAndShadows = function() {
  // TODO(gorelick): Is BQA in TOA calculated using Fmask as well? If so, how do
  // we model and/or abstract this for the user?
  // TODO(gino-m): Do something different or fail for type != 'SR'.
  this.collection_ = this.collection_.map(Landsat8.applyCloudShadowBitMasks);
  return this;
};

/**
 * Masks clouds and shadows in the specified image using relevant bits in the
 * `pixel_qa` band generated by the CFMASK algorithm.
 *
 * Returns the image with the mask applied.
 *
 * @param {!ee.Image} image The image to be masked.
 * @return {!ee.Image}
 */
Landsat8.applyCloudShadowBitMasks = function(image) {
  var qa = image.select(QA_BAND);
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(CLOUD_SHADOW_BIT_MASK)
                 .eq(0)
                 .and(qa.bitwiseAnd(CLOUD_BIT_MASK).eq(0));
  return image.updateMask(mask);
};

Landsat8.QA_BAND = QA_BAND;
Landsat8.CLOUD_SHADOW_BIT_MASK = CLOUD_SHADOW_BIT_MASK;
Landsat8.CLOUD_BIT_MASK = CLOUD_BIT_MASK;

exports.Landsat8 = Landsat8;
